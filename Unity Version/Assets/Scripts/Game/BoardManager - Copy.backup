using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BoardManager : MonoBehaviour
{
    public static BoardManager Instance { get; protected set; }

    private bool gameOver;
    public bool IsWhite { get; protected set; }

    public enum StoneType { Flat, Standing, Capstone };

    public GameObject highlightPrefab;
    public GameObject boardPiece;
    public GameObject moveController;
    public GameObject toggleStoneType;

    public List<GameObject> Pieces;
    public Player[] players;
    public GameObject victoryScreen;

    private GameObject highlightObject;

    private int mouseX = -1;
    private int mouseY = -1;
    private bool isWhiteTurn = true;
    private bool firstTurn = true;
    public StoneType currentStone;

    private List<Stone>[,] activeStones;
    private List<Stone> selectedStones = new List<Stone>();
    private List<Stone> movingStones;

    private bool[,] allowedMoves;

    private int[] moveStart;
    private int[] currentPosition;
    private int pickedupStones = 0;

    private int selectionHeight = -1;

    private List<Char> moveString = new List<char>();

    void Start()
    {
        if (Instance == null)
            Instance = this;
        else
            Destroy(gameObject);

        if (Client.Instance)
            IsWhite = Client.Instance.isHost;
        else
            IsWhite = true;
       
        allowedMoves = new bool[GameManager.Instance.BoardSize, GameManager.Instance.BoardSize];
        highlightObject = Instantiate(highlightPrefab, transform) as GameObject;
        moveStart = new int[2];

        currentStone = StoneType.Flat;
        PrepareActiveStones();
        CreateBoard();
    }
    void Update()
    {
        //DrawTakBoard();
        if (gameOver)
            return;

        if (!moveController.activeSelf)
        {
            UpdateBoardSelection();
            HighlightSlot();
            UserSelection();
        }
        else if (pickedupStones == 0)
        {
            UpdateStoneSelection();
            PickUpStones();
        }
        else
        {
            UpdateBoardSelection();
            PlaceStone();
        }

    }
    private void PrepareActiveStones()
    {
        activeStones = new List<Stone>[GameManager.Instance.BoardSize, GameManager.Instance.BoardSize];
        for (int i = 0; i < GameManager.Instance.BoardSize; i++)
        {
            for (int j = 0; j < GameManager.Instance.BoardSize; j++)
            {
                activeStones[i, j] = new List<Stone>();
            }
        }
    }
    private void CreateBoard()
    {
        GameObject board = Instantiate(new GameObject(), new Vector3(), Quaternion.identity, transform);

        for (int i = 0; i < GameManager.Instance.BoardSize; i++)
        {
            for (int j = 0; j < GameManager.Instance.BoardSize; j++)
            {
                Instantiate(boardPiece, new Vector3(i + 0.5f, 0, j + 0.5f), Quaternion.identity, board.transform);
            }
        }
    }

    private void UpdateBoardSelection()
    {
        if (!Camera.main)
            return;

        RaycastHit hit;
        if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hit, 25.0f, LayerMask.GetMask("TakBoard")))
        {
            mouseX = (int)(hit.point.x);
            mouseY = (int)(hit.point.z);
        }
        else
        {
            mouseY = -1;
            mouseX = -1;
        }
    }
    private void UpdateStoneSelection()
    {
        if (!Camera.main)
            return;

        RaycastHit hit;
        if (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition), out hit, 25.0f, LayerMask.GetMask("TakStone")))
        {
            Stone go = hit.transform.gameObject.GetComponent<Stone>();
            if (go.X == moveStart[0] && go.Y == moveStart[1])
            {
                Stone topStone = activeStones[moveStart[0], moveStart[1]][activeStones[moveStart[0], moveStart[1]].Count - 1].GetComponent<Stone>();
                selectionHeight = topStone.Height - go.Height;
                if (selectionHeight >= GameManager.Instance.BoardSize)
                    selectionHeight = GameManager.Instance.BoardSize - 1;
            }
        }
        else
        {
            selectionHeight = -1;
        }
    }
    private void HighlightSlot()
    {
        if (mouseX == -1 && mouseY == -1)
        {
            highlightObject.SetActive(false);
            return;
        }
        if (IsWhite != isWhiteTurn)
            return;
        
        // If there is a stone in this position and
        // it is not your stone or
        // it is the frst turn, do not highlight this slot.
        if (activeStones[mouseX, mouseY].Count != 0 &&                                     
            (activeStones[mouseX, mouseY][activeStones[mouseX, mouseY].Count - 1].isWhite != IsWhite || 
            firstTurn))                                                     
            return;

        highlightObject.transform.position = new Vector3(mouseX + (0.5f), 0.001f, mouseY + (0.5f));
        highlightObject.SetActive(true);
    }

    private void UserSelection()
    {
        if (IsWhite != isWhiteTurn)
            return;

        if (mouseX == -1 || mouseY == -1)
            return;

        if (Input.GetMouseButtonDown(0))
        {
            if (activeStones[mouseX, mouseY].Count == 0)
            {
                if ((currentStone == StoneType.Capstone) && players[isWhiteTurn ? 0 : 1].HasCapstone() == false)
                {
                    currentStone = StoneType.Flat;
                    return;
                }

                if (firstTurn)
                {
                    SpawnFirstStone();
                    firstTurn = firstTurn && isWhiteTurn;
                }
                else SpawnStone();
                SendSpawnStone();
                NextTurn();
            }
            else
            {
                SelectStones();
            }
        }
    }

    private void SpawnStone()
    {
        int index = isWhiteTurn ? 0 : 1;
        int capstoneOffset = (currentStone == StoneType.Capstone ? 2 : 0);

        GameObject go = Instantiate(Pieces[index + capstoneOffset],
            transform.position,
            Quaternion.identity, transform) as GameObject;

        activeStones[mouseX, mouseY].Add(
            Stone.AddStone(go, mouseX, mouseY, isWhiteTurn, currentStone));

        if (currentStone == StoneType.Capstone)
            players[index].TakeCapstone();
        else
            players[index].TakeStone();
    }
    private void SpawnFirstStone()
    {
        int index = isWhiteTurn ? 1 : 0;

        GameObject go = Instantiate(Pieces[index],
            transform.position,
            Quaternion.identity, transform) as GameObject;

        activeStones[mouseX, mouseY].Add(
             Stone.AddStone(go, mouseX, mouseY, !isWhiteTurn, currentStone));

        players[index].TakeStone();
    }

    private void SelectStones()
    {
        if (!firstTurn && activeStones[mouseX, mouseY][activeStones[mouseX, mouseY].Count - 1].isWhite == IsWhite)
            SetMovePosition();
    }
    private void SetMovePosition()
    {
        moveStart[0] = mouseX;
        moveStart[1] = mouseY;
        currentPosition = new int[] { moveStart[0], moveStart[1] };
        moveController.SetActive(true);
    }
    private void ResetMovePosition()
    {
        moveStart[0] = -1;
        moveStart[1] = -1;
        currentPosition = new int[] { moveStart[0], moveStart[1] };
        moveController.SetActive(false);
    }
    private void PickUpStones()
    {
        if (activeStones[moveStart[0], moveStart[1]].Count == 1)
        {
            // moving one stone
            selectedStones = new List<Stone>(activeStones[moveStart[0], moveStart[1]]);
            activeStones[moveStart[0], moveStart[1]].Clear();

            selectedStones[0].transform.localPosition += new Vector3(0, 0.4f, 0) * 4;
            pickedupStones = 1;

            movingStones = new List<Stone>(selectedStones);

            SetAllowedMoves();
            BoardHighlights.Instance.HighlightAllowedMoves(allowedMoves, GameManager.Instance.BoardSize);

            highlightObject.SetActive(false);
        }
        else if (Input.GetMouseButtonDown(0))
        {
            int stackHeight = activeStones[moveStart[0], moveStart[1]].Count;
            // moving multiple stones
            if (selectionHeight != -1)
            {
                selectedStones = activeStones[moveStart[0], moveStart[1]].GetRange(stackHeight - selectionHeight - 1, selectionHeight + 1);
                movingStones = new List<Stone>(selectedStones);
                pickedupStones = 0;
                foreach (Stone selected in selectedStones)
                {
                    activeStones[moveStart[0], moveStart[1]].Remove(selected);
                    selectedStones[pickedupStones].transform.localPosition += new Vector3(0, 0.4f, 0) * 4;
                    pickedupStones++;
                }
                SetAllowedMoves();
                BoardHighlights.Instance.HighlightAllowedMoves(allowedMoves, GameManager.Instance.BoardSize);
                highlightObject.SetActive(false);

                moveString.Add((char)(selectionHeight + '1'));
            }
        }

        if (pickedupStones > 0)
        {
            movingStones = new List<Stone>(selectedStones);
            moveString.Add((char)(moveStart[0] + 'a'));
            moveString.Add((char)(moveStart[1] + '1'));
        }
    }
    public void CancelMove()
    {
        foreach (Stone selected in movingStones)
        {
            for (int i = 0; i < GameManager.Instance.BoardSize; i++)
            {
                for (int j = 0; j < GameManager.Instance.BoardSize; j++)
                {
                    activeStones[i, j].Remove(selected);
                }
            }

            selected.SetPosition(
                moveStart[0], moveStart[1], 
                activeStones[moveStart[0], moveStart[1]].Count);

            activeStones[moveStart[0], moveStart[1]].Add(selected);
        }
        pickedupStones = 0;
        movingStones.Clear();
        selectedStones.Clear();
        ResetMovePosition();

        BoardHighlights.Instance.HideHighlights();

        moveStart[0] = -1;
        moveStart[1] = -1;
        currentPosition = new int[] { moveStart[0], moveStart[1] };
        moveString = new List<char>();
    }
    private void SetAllowedMoves()
    {
        allowedMoves = new bool[GameManager.Instance.BoardSize, GameManager.Instance.BoardSize];
        if ((currentPosition[0] == moveStart[0] && currentPosition[1] == moveStart[1]) || !GameManager.Instance.officialRules)
        {
            if (currentPosition[0] - 1 >= 0)
                allowedMoves[currentPosition[0] - 1, currentPosition[1]] = CheckStoneTypes(currentPosition[0] - 1, currentPosition[1]);

            if (currentPosition[1] - 1 >= 0)
                allowedMoves[currentPosition[0], currentPosition[1] - 1] = CheckStoneTypes(currentPosition[0], currentPosition[1] - 1);

            if (currentPosition[0] + 1 < GameManager.Instance.BoardSize)
                allowedMoves[currentPosition[0] + 1, currentPosition[1]] = CheckStoneTypes(currentPosition[0] + 1, currentPosition[1]);

            if (currentPosition[1] + 1 < GameManager.Instance.BoardSize)
                allowedMoves[currentPosition[0], currentPosition[1] + 1] = CheckStoneTypes(currentPosition[0], currentPosition[1] + 1);

            if (!(selectedStones.Count == movingStones.Count))
                allowedMoves[currentPosition[0], currentPosition[1]] = true;
        }
        else
        {
            allowedMoves[currentPosition[0], currentPosition[1]] = true;

            if (moveStart[0] > currentPosition[0] && currentPosition[0] > 0) // Left
            {
                allowedMoves[currentPosition[0] - 1, currentPosition[1]] = CheckStoneTypes(currentPosition[0] - 1, currentPosition[1]);
            }
            else if (moveStart[0] < currentPosition[0] && currentPosition[0] < GameManager.Instance.BoardSize - 1) // Right
            {
                allowedMoves[currentPosition[0] + 1, currentPosition[1]] = CheckStoneTypes(currentPosition[0] + 1, currentPosition[1]);
            }
            else if (moveStart[1] > currentPosition[1] && currentPosition[1] > 0) // Down
            {
                allowedMoves[currentPosition[0], currentPosition[1] - 1] = CheckStoneTypes(currentPosition[0], currentPosition[1] - 1);
            }
            else if (moveStart[1] < currentPosition[1] && currentPosition[1] < GameManager.Instance.BoardSize - 1) // Up
            {
                allowedMoves[currentPosition[0], currentPosition[1] + 1] = CheckStoneTypes(currentPosition[0], currentPosition[1] + 1);
            }
        }
    }
    private bool CheckStoneTypes(int x, int y)
    {
        return (activeStones[x, y].Count == 0 ||
            activeStones[x, y][activeStones[x, y].Count - 1].StoneType == StoneType.Flat ||
            (activeStones[x, y][activeStones[x, y].Count - 1].StoneType == StoneType.Standing &&
             selectedStones[0].StoneType == StoneType.Capstone));
    }
    private void PlaceStone()
    {
        if (Input.GetMouseButtonDown(0) &&
            mouseX >= 0 && mouseY >= 0 &&
            allowedMoves[mouseX, mouseY])
        {
            if (movingStones.Count == pickedupStones)
            {
                char next;
                if (mouseX != moveStart[0])
                    next = mouseX > moveStart[0] ? '>' : '<';
                else
                    next = mouseY > moveStart[1] ? '+' : '-';
                moveString.Add(next);
            }

            if (mouseX == currentPosition[0] && mouseY == currentPosition[1])
                moveString[moveString.Count - 1] = (char)(moveString[moveString.Count - 1] + 1);
            else if (movingStones.Count != 1)
                moveString.Add('1');

            currentPosition[0] = mouseX;
            currentPosition[1] = mouseY;

            selectedStones[0].SetPosition(mouseX, mouseY, activeStones[mouseX, mouseY].Count);
            Flatten();

            activeStones[mouseX, mouseY].Add(selectedStones[0]);
            selectedStones.RemoveAt(0);
            pickedupStones--;

            BoardHighlights.Instance.HideHighlights();


            if (pickedupStones > 0)
            {
                for(int i = 0; i < selectedStones.Count; i++)
                {
                    selectedStones[i].SetPositionFloating(
                        mouseX, mouseY, 
                        activeStones[mouseX, mouseY].Count, 
                        i);
                }

                SetAllowedMoves();
                BoardHighlights.Instance.HighlightAllowedMoves(allowedMoves, GameManager.Instance.BoardSize);
            }
            else
            {
                SendMove();
                NextTurn();
                ResetMovePosition();
            }
        }
    }
    private void Flatten()
    {
        Flatten(mouseX, mouseY);
    }
    private void Flatten(int x, int y)
    {
        if (activeStones[x, y].Count > 0 && selectedStones.Count == 1)
        {
            Stone Capstone = selectedStones[0];
            Stone Standing = activeStones[x, y][activeStones[x, y].Count - 1];
            if (Capstone.StoneType == StoneType.Capstone &&
                Standing.StoneType == StoneType.Standing)
            {
                Standing.SetPosition(x, y, Standing.Height);
                Standing.Flatten();
            }
        }
    }


    private void NextTurn()
    {
        CheckWin();
        isWhiteTurn = !isWhiteTurn;
        currentStone = StoneType.Flat;
        highlightObject.SetActive(false);

        foreach (Player p in players)
            p.SwapColor();

        if (!Client.Instance)
            IsWhite = !IsWhite;
    }
    
    private void CheckWin()
    {
        bool whiteWin = false;
        bool blackWin = false;
        
        // Calls search for roads with all tiles along two adjacent edges. If a road is found,
        // a flag is set for the corresponding player.
        for (int i = 0; i < GameManager.Instance.BoardSize; i++)
        {
            bool[,] explored = new bool[GameManager.Instance.BoardSize, GameManager.Instance.BoardSize];
            
            if (activeStones[i, 0].Count > 0 && SearchForRoads(i, 0, explored,
                activeStones[i, 0][activeStones[i, 0].Count - 1].isWhite, true))
            {
                if (activeStones[i, 0][activeStones[i, 0].Count - 1].isWhite)
                    whiteWin = true;
                else
                    blackWin = true;
            }

            explored = new bool[GameManager.Instance.BoardSize, GameManager.Instance.BoardSize];
            
            if (activeStones[0, i].Count > 0 && SearchForRoads(0, i, explored,
                activeStones[0, i][activeStones[0, i].Count - 1].isWhite, false))
            {
                if (activeStones[0, i][activeStones[0, i].Count - 1].isWhite)
                    whiteWin = true;
                else
                    blackWin = true;
            }
        }

        // If a road is made for the current player, they win,
        // if a road is made for the other player, they win,
        // if someone is out of stones, FlatWin is called.
        if ((IsWhite && whiteWin) || (!IsWhite && blackWin))
        {
            ShowVictoryScreen(IsWhite);
        }
        else if (blackWin || whiteWin)
        {
            ShowVictoryScreen(!IsWhite);
        }
        else if (players[0].NoStonesLeft() || players[1].NoStonesLeft())
            FlatWin();
    }
    private void FlatWin()
    {
        int[] stoneCount = new int[2];
        for (int i = 0; i < GameManager.Instance.BoardSize; i++)
        {
            for (int j = 0; j < GameManager.Instance.BoardSize; j++)
            {
                if (activeStones[i, j].Count > 0)
                    stoneCount[activeStones[i, j][activeStones[i, j].Count - 1].isWhite ? 0 : 1]++;
            }
        }

        if (stoneCount[0] == stoneCount[1])
            ShowVictoryScreen(true, true);
        else
            ShowVictoryScreen(stoneCount[0] > stoneCount[1]);
    }
    private bool SearchForRoads(int x, int y, bool[,] explored, bool isWhiteRoad, bool verticalSearch)
    {
        if (activeStones[x, y].Count == 0 || explored[x, y])
            return false;


        Stone currentStone = activeStones[x, y][activeStones[x, y].Count - 1];
        if (currentStone.isWhite != isWhiteRoad || currentStone.StoneType == StoneType.Standing)
            return false;


        if ((verticalSearch && y == (GameManager.Instance.BoardSize - 1)) || (!verticalSearch && x == (GameManager.Instance.BoardSize - 1)))
            return true;


        explored[x, y] = true;

        return (x < GameManager.Instance.BoardSize - 1 && SearchForRoads(x + 1, y, explored, isWhiteRoad, verticalSearch))
            || (y < GameManager.Instance.BoardSize - 1 && SearchForRoads(x, y + 1, explored, isWhiteRoad, verticalSearch))
            || (x > 1 && SearchForRoads(x - 1, y, explored, isWhiteRoad, verticalSearch))
            || (y > 1 && SearchForRoads(x, y - 1, explored, isWhiteRoad, verticalSearch));
    }

    private void ShowVictoryScreen(bool whiteWinner = true, bool tie = false)
    {
        victoryScreen.SetActive(true);
        gameOver = true;

        if (tie)
            victoryScreen.GetComponentInChildren<Text>().text = "It's a Tie!";
        else
        {
            string winner;
            if (Client.Instance)
                winner = Client.Instance.players[whiteWinner ? 0 : 1].name;
            else
                winner = whiteWinner ? "White" : "Black";
            victoryScreen.GetComponentInChildren<Text>().text = winner + " has won the game!";
        }
    }

    private void SendSpawnStone()
    {
        if (currentStone != StoneType.Flat && !firstTurn)
            moveString.Add(currentStone == StoneType.Capstone ? 'C' : 'S');

        moveString.Add((char)(mouseX + 'a'));
        moveString.Add((char)(mouseY + '1'));
        SendMove();
    }
    private void SendMove()
    {
        if (Client.Instance)
        {
            Client.Instance.Send("CMOV|" + new string(moveString.ToArray()));
            Client.Instance.sentMove = true;
            moveString = new List<char>();
        }
    }
    public void TryMove(string fMoveString)
    {
        int index = 0;
        int[] movingDir = new int[2];

        if (fMoveString[index] == 'C' || fMoveString[index] == 'S')
        {
            currentStone = (fMoveString[index] == 'C') ? StoneType.Capstone : StoneType.Standing;
            index++;
        }
        else if (fMoveString[index] >= '0' && fMoveString[index] <= '9')
            pickedupStones = fMoveString[index++] - '0';


        moveStart[0] = fMoveString[index++] - 'a';
        moveStart[1] = fMoveString[index++] - '1';

        if (fMoveString.Length == index)
        {
            mouseX = moveStart[0];
            mouseY = moveStart[1];

            if (firstTurn)
                SpawnFirstStone();
            else
                SpawnStone();
            firstTurn = firstTurn && isWhiteTurn;
            ResetMovePosition();
            NextTurn();
            return;
        }

        if (pickedupStones == 0)
            pickedupStones = 1;

        char dir = fMoveString[index++];

        movingDir[0] = (dir == '>') ? 1 : (dir == '<') ? -1 : 0;
        movingDir[1] = (dir == '+') ? 1 : (dir == '-') ? -1 : 0;

        selectedStones = activeStones[moveStart[0], moveStart[1]].GetRange(
            activeStones[moveStart[0], moveStart[1]].Count - pickedupStones, 
            pickedupStones);
        
        activeStones[moveStart[0], moveStart[1]].RemoveRange(
            activeStones[moveStart[0], moveStart[1]].Count - pickedupStones,
            pickedupStones);

        if (index == fMoveString.Length)
        {
            fMoveString += "1";
        }


        for (int i = index; i < fMoveString.Length; i++)
        {
            moveStart[0] += movingDir[0];
            moveStart[1] += movingDir[1];
            for (int j = fMoveString[index] - '0'; j > 0; j--)
            {
                activeStones[moveStart[0], moveStart[1]].Add(selectedStones[0]);

                selectedStones[0].SetPosition(
                    moveStart[0], moveStart[1],
                    activeStones[moveStart[0], moveStart[1]].Count -1);

                Flatten(moveStart[0], moveStart[1]);

                selectedStones.RemoveAt(0);
            }
        }

        pickedupStones = 0;
        selectedStones.Clear();
        NextTurn();
        ResetMovePosition();
    }
}